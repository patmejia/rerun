# NOTE: This file was autogenerated by re_types_builder; DO NOT EDIT.

from __future__ import annotations

from typing import TYPE_CHECKING, Any, Literal, Sequence, Union

import pyarrow as pa
from attrs import define, field

from .._baseclasses import (
    BaseExtensionArray,
    BaseExtensionType,
)

__all__ = ["ImageVariant", "ImageVariantArray", "ImageVariantArrayLike", "ImageVariantLike", "ImageVariantType"]


@define
class ImageVariant:
    """An enum indicating the type of `Image`."""

    inner: bool = field(converter=bool)
    """
    Mono (bool):
        An MxN tensor, treated as a grayscale image.

    Rgb (bool):
        An MxNx3 tensor, treated as an RGB image.

    Rgba (bool):
        An MxNx4 tensor, treated as an RGBA image.

    Segmentation (bool):
        An MxN tensor where each element is a ClassID, to be used with an AnnotationContext.

    Depth (bool):
        An MxN tensor where each element represents a depth value.
    """

    kind: Literal["mono", "rgb", "rgba", "segmentation", "depth"] = field(default="mono")


if TYPE_CHECKING:
    ImageVariantLike = Union[
        ImageVariant,
        bool,
    ]
    ImageVariantArrayLike = Union[
        ImageVariant,
        bool,
        Sequence[ImageVariantLike],
    ]
else:
    ImageVariantLike = Any
    ImageVariantArrayLike = Any

# --- Arrow support ---


class ImageVariantType(BaseExtensionType):
    def __init__(self) -> None:
        pa.ExtensionType.__init__(
            self,
            pa.dense_union(
                [
                    pa.field("_null_markers", pa.null(), nullable=True, metadata={}),
                    pa.field("Mono", pa.bool_(), nullable=False, metadata={}),
                    pa.field("Rgb", pa.bool_(), nullable=False, metadata={}),
                    pa.field("Rgba", pa.bool_(), nullable=False, metadata={}),
                    pa.field("Segmentation", pa.bool_(), nullable=False, metadata={}),
                    pa.field("Depth", pa.bool_(), nullable=False, metadata={}),
                ]
            ),
            "rerun.datatypes.ImageVariant",
        )


class ImageVariantArray(BaseExtensionArray[ImageVariantArrayLike]):
    _EXTENSION_NAME = "rerun.datatypes.ImageVariant"
    _EXTENSION_TYPE = ImageVariantType

    @staticmethod
    def _native_to_pa_array(data: ImageVariantArrayLike, data_type: pa.DataType) -> pa.Array:
        raise NotImplementedError


ImageVariantType._ARRAY_TYPE = ImageVariantArray

# TODO(cmc): bring back registration to pyarrow once legacy types are gone
# pa.register_extension_type(ImageVariantType())
