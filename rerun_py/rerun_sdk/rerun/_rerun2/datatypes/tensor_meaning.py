# NOTE: This file was autogenerated by re_types_builder; DO NOT EDIT.

from __future__ import annotations

from typing import TYPE_CHECKING, Any, Literal, Sequence, Union

import pyarrow as pa
from attrs import define, field

from .._baseclasses import (
    BaseExtensionArray,
    BaseExtensionType,
)

__all__ = ["TensorMeaning", "TensorMeaningArray", "TensorMeaningArrayLike", "TensorMeaningLike", "TensorMeaningType"]


@define
class TensorMeaning:
    inner: bool = field(converter=bool)
    """
    Data (bool):
        The tensor represents arbitrary data

    Rgba (bool):
        The inner-most tensor dimension represent R, G, B, and optional A channels

    Mono (bool):
        The inner-most tensor dimension represents a mono color channel

    ClassId (bool):
        The inner-most tensor dimension represents a ClassId

    Depth (bool):
        The inner-most tensor dimension represents a measurement of depth
    """

    kind: Literal["data", "rgba", "mono", "classid", "depth"] = field(default="data")


if TYPE_CHECKING:
    TensorMeaningLike = Union[
        TensorMeaning,
        bool,
    ]
    TensorMeaningArrayLike = Union[
        TensorMeaning,
        bool,
        Sequence[TensorMeaningLike],
    ]
else:
    TensorMeaningLike = Any
    TensorMeaningArrayLike = Any

# --- Arrow support ---


class TensorMeaningType(BaseExtensionType):
    def __init__(self) -> None:
        pa.ExtensionType.__init__(
            self,
            pa.dense_union(
                [
                    pa.field("_null_markers", pa.null(), nullable=True, metadata={}),
                    pa.field("Data", pa.bool_(), nullable=False, metadata={}),
                    pa.field("Rgba", pa.bool_(), nullable=False, metadata={}),
                    pa.field("Mono", pa.bool_(), nullable=False, metadata={}),
                    pa.field("ClassId", pa.bool_(), nullable=False, metadata={}),
                    pa.field("Depth", pa.bool_(), nullable=False, metadata={}),
                ]
            ),
            "rerun.datatypes.TensorMeaning",
        )


class TensorMeaningArray(BaseExtensionArray[TensorMeaningArrayLike]):
    _EXTENSION_NAME = "rerun.datatypes.TensorMeaning"
    _EXTENSION_TYPE = TensorMeaningType

    @staticmethod
    def _native_to_pa_array(data: TensorMeaningArrayLike, data_type: pa.DataType) -> pa.Array:
        raise NotImplementedError


TensorMeaningType._ARRAY_TYPE = TensorMeaningArray

# TODO(cmc): bring back registration to pyarrow once legacy types are gone
# pa.register_extension_type(TensorMeaningType())
