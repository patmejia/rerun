// NOTE: This file was autogenerated by re_types_builder; DO NOT EDIT.
// Based on "crates/re_types/definitions/rerun/datatypes/tensor_data.fbs"

#pragma once

#include <arrow/type_fwd.h>
#include <cstdint>
#include <cstring>
#include <new>
#include <utility>
#include <vector>

namespace rerun {
    namespace datatypes {
        namespace detail {
            enum class TensorDataTag : uint8_t {
                /// Having a special empty state makes it possible to implement move-semantics. We
                /// need to be able to leave the object in a state which we can run the destructor
                /// on.
                NONE = 0,
                U8,
                U16,
                U32,
                U64,
                I8,
                I16,
                I32,
                I64,
                F16,
                F32,
                F64,
                JPEG,
            };

            union TensorDataData {
                std::vector<uint8_t> u8;

                std::vector<uint16_t> u16;

                std::vector<uint32_t> u32;

                std::vector<uint64_t> u64;

                std::vector<int8_t> i8;

                std::vector<int8_t> i16;

                std::vector<int32_t> i32;

                std::vector<int64_t> i64;

                std::vector<float> f16;

                std::vector<float> f32;

                std::vector<double> f64;

                std::vector<int8_t> jpeg;

                TensorDataData() {}

                ~TensorDataData() {}

                void swap(TensorDataData &other) noexcept {
                    // This bitwise swap would fail for self-referential types, but we don't have
                    // any of those.
                    char temp[sizeof(TensorDataData)];
                    void *otherbytes = reinterpret_cast<void *>(&other);
                    void *thisbytes = reinterpret_cast<void *>(this);
                    std::memcpy(temp, thisbytes, sizeof(TensorDataData));
                    std::memcpy(thisbytes, otherbytes, sizeof(TensorDataData));
                    std::memcpy(otherbytes, temp, sizeof(TensorDataData));
                }
            };
        } // namespace detail

        /// Storage for a `Tensor`
        struct TensorData {
            TensorData() : _tag(detail::TensorDataTag::NONE) {}

            TensorData(const TensorData &other) : _tag(other._tag) {
                switch (other._tag) {
                    case detail::TensorDataTag::U8: {
                        _data.u8 = other._data.u8;
                        break;
                    }
                    case detail::TensorDataTag::U16: {
                        _data.u16 = other._data.u16;
                        break;
                    }
                    case detail::TensorDataTag::U32: {
                        _data.u32 = other._data.u32;
                        break;
                    }
                    case detail::TensorDataTag::U64: {
                        _data.u64 = other._data.u64;
                        break;
                    }
                    case detail::TensorDataTag::I8: {
                        _data.i8 = other._data.i8;
                        break;
                    }
                    case detail::TensorDataTag::I16: {
                        _data.i16 = other._data.i16;
                        break;
                    }
                    case detail::TensorDataTag::I32: {
                        _data.i32 = other._data.i32;
                        break;
                    }
                    case detail::TensorDataTag::I64: {
                        _data.i64 = other._data.i64;
                        break;
                    }
                    case detail::TensorDataTag::F16: {
                        _data.f16 = other._data.f16;
                        break;
                    }
                    case detail::TensorDataTag::F32: {
                        _data.f32 = other._data.f32;
                        break;
                    }
                    case detail::TensorDataTag::F64: {
                        _data.f64 = other._data.f64;
                        break;
                    }
                    case detail::TensorDataTag::JPEG: {
                        _data.jpeg = other._data.jpeg;
                        break;
                    }
                    case detail::TensorDataTag::NONE:
                        const void *otherbytes = reinterpret_cast<const void *>(&other._data);
                        void *thisbytes = reinterpret_cast<void *>(&this->_data);
                        std::memcpy(thisbytes, otherbytes, sizeof(detail::TensorDataData));
                        break;
                }
            }

            TensorData &operator=(const TensorData &other) noexcept {
                TensorData tmp(other);
                this->swap(tmp);
                return *this;
            }

            TensorData(TensorData &&other) noexcept : _tag(detail::TensorDataTag::NONE) {
                this->swap(other);
            }

            TensorData &operator=(TensorData &&other) noexcept {
                this->swap(other);
                return *this;
            }

            ~TensorData() {
                switch (this->_tag) {
                    case detail::TensorDataTag::NONE: {
                        break; // Nothing to destroy
                    }
                    case detail::TensorDataTag::U8: {
                        typedef std::vector<uint8_t> TypeAlias;
                        _data.u8.~TypeAlias();
                        break;
                    }
                    case detail::TensorDataTag::U16: {
                        typedef std::vector<uint16_t> TypeAlias;
                        _data.u16.~TypeAlias();
                        break;
                    }
                    case detail::TensorDataTag::U32: {
                        typedef std::vector<uint32_t> TypeAlias;
                        _data.u32.~TypeAlias();
                        break;
                    }
                    case detail::TensorDataTag::U64: {
                        typedef std::vector<uint64_t> TypeAlias;
                        _data.u64.~TypeAlias();
                        break;
                    }
                    case detail::TensorDataTag::I8: {
                        typedef std::vector<int8_t> TypeAlias;
                        _data.i8.~TypeAlias();
                        break;
                    }
                    case detail::TensorDataTag::I16: {
                        typedef std::vector<int8_t> TypeAlias;
                        _data.i16.~TypeAlias();
                        break;
                    }
                    case detail::TensorDataTag::I32: {
                        typedef std::vector<int32_t> TypeAlias;
                        _data.i32.~TypeAlias();
                        break;
                    }
                    case detail::TensorDataTag::I64: {
                        typedef std::vector<int64_t> TypeAlias;
                        _data.i64.~TypeAlias();
                        break;
                    }
                    case detail::TensorDataTag::F16: {
                        typedef std::vector<float> TypeAlias;
                        _data.f16.~TypeAlias();
                        break;
                    }
                    case detail::TensorDataTag::F32: {
                        typedef std::vector<float> TypeAlias;
                        _data.f32.~TypeAlias();
                        break;
                    }
                    case detail::TensorDataTag::F64: {
                        typedef std::vector<double> TypeAlias;
                        _data.f64.~TypeAlias();
                        break;
                    }
                    case detail::TensorDataTag::JPEG: {
                        typedef std::vector<int8_t> TypeAlias;
                        _data.jpeg.~TypeAlias();
                        break;
                    }
                }
            }

            void swap(TensorData &other) noexcept {
                auto tag_temp = this->_tag;
                this->_tag = other._tag;
                other._tag = tag_temp;
                this->_data.swap(other._data);
            }

            static TensorData u8(std::vector<uint8_t> u8) {
                typedef std::vector<uint8_t> TypeAlias;
                TensorData self;
                self._tag = detail::TensorDataTag::U8;
                new (&self._data.u8) TypeAlias(std::move(u8));
                return self;
            }

            static TensorData u16(std::vector<uint16_t> u16) {
                typedef std::vector<uint16_t> TypeAlias;
                TensorData self;
                self._tag = detail::TensorDataTag::U16;
                new (&self._data.u16) TypeAlias(std::move(u16));
                return self;
            }

            static TensorData u32(std::vector<uint32_t> u32) {
                typedef std::vector<uint32_t> TypeAlias;
                TensorData self;
                self._tag = detail::TensorDataTag::U32;
                new (&self._data.u32) TypeAlias(std::move(u32));
                return self;
            }

            static TensorData u64(std::vector<uint64_t> u64) {
                typedef std::vector<uint64_t> TypeAlias;
                TensorData self;
                self._tag = detail::TensorDataTag::U64;
                new (&self._data.u64) TypeAlias(std::move(u64));
                return self;
            }

            static TensorData i8(std::vector<int8_t> i8) {
                typedef std::vector<int8_t> TypeAlias;
                TensorData self;
                self._tag = detail::TensorDataTag::I8;
                new (&self._data.i8) TypeAlias(std::move(i8));
                return self;
            }

            static TensorData i16(std::vector<int8_t> i16) {
                typedef std::vector<int8_t> TypeAlias;
                TensorData self;
                self._tag = detail::TensorDataTag::I16;
                new (&self._data.i16) TypeAlias(std::move(i16));
                return self;
            }

            static TensorData i32(std::vector<int32_t> i32) {
                typedef std::vector<int32_t> TypeAlias;
                TensorData self;
                self._tag = detail::TensorDataTag::I32;
                new (&self._data.i32) TypeAlias(std::move(i32));
                return self;
            }

            static TensorData i64(std::vector<int64_t> i64) {
                typedef std::vector<int64_t> TypeAlias;
                TensorData self;
                self._tag = detail::TensorDataTag::I64;
                new (&self._data.i64) TypeAlias(std::move(i64));
                return self;
            }

            static TensorData f16(std::vector<float> f16) {
                typedef std::vector<float> TypeAlias;
                TensorData self;
                self._tag = detail::TensorDataTag::F16;
                new (&self._data.f16) TypeAlias(std::move(f16));
                return self;
            }

            static TensorData f32(std::vector<float> f32) {
                typedef std::vector<float> TypeAlias;
                TensorData self;
                self._tag = detail::TensorDataTag::F32;
                new (&self._data.f32) TypeAlias(std::move(f32));
                return self;
            }

            static TensorData f64(std::vector<double> f64) {
                typedef std::vector<double> TypeAlias;
                TensorData self;
                self._tag = detail::TensorDataTag::F64;
                new (&self._data.f64) TypeAlias(std::move(f64));
                return self;
            }

            static TensorData jpeg(std::vector<int8_t> jpeg) {
                typedef std::vector<int8_t> TypeAlias;
                TensorData self;
                self._tag = detail::TensorDataTag::JPEG;
                new (&self._data.jpeg) TypeAlias(std::move(jpeg));
                return self;
            }

            /// Returns the arrow data type this type corresponds to.
            static const std::shared_ptr<arrow::DataType> &to_arrow_datatype();

            /// Creates a new array builder with an array of this type.
            static arrow::Result<std::shared_ptr<arrow::DenseUnionBuilder>> new_arrow_array_builder(
                arrow::MemoryPool *memory_pool
            );

            /// Fills an arrow array builder with an array of this type.
            static arrow::Status fill_arrow_array_builder(
                arrow::DenseUnionBuilder *builder, const TensorData *elements, size_t num_elements
            );

          private:
            detail::TensorDataTag _tag;
            detail::TensorDataData _data;
        };
    } // namespace datatypes
} // namespace rerun
