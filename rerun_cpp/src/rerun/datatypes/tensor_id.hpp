// NOTE: This file was autogenerated by re_types_builder; DO NOT EDIT.
// Based on "crates/re_types/definitions/rerun/datatypes/tensor_id.fbs"

#pragma once

#include <arrow/type_fwd.h>
#include <cstdint>

namespace rerun {
    namespace datatypes {
        /// Storage for a `Tensor`
        struct TensorId {
            uint8_t id[16];

          public:
            TensorId() = default;

            TensorId(const uint8_t (&_id)[16])
                : id{_id[0],
                     _id[1],
                     _id[2],
                     _id[3],
                     _id[4],
                     _id[5],
                     _id[6],
                     _id[7],
                     _id[8],
                     _id[9],
                     _id[10],
                     _id[11],
                     _id[12],
                     _id[13],
                     _id[14],
                     _id[15]} {}

            /// Returns the arrow data type this type corresponds to.
            static const std::shared_ptr<arrow::DataType>& to_arrow_datatype();

            /// Creates a new array builder with an array of this type.
            static arrow::Result<std::shared_ptr<arrow::FixedSizeListBuilder>>
                new_arrow_array_builder(arrow::MemoryPool* memory_pool);

            /// Fills an arrow array builder with an array of this type.
            static arrow::Status fill_arrow_array_builder(
                arrow::FixedSizeListBuilder* builder, const TensorId* elements, size_t num_elements
            );
        };
    } // namespace datatypes
} // namespace rerun
